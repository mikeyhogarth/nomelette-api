service: nomelette

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: eu-west-1
  environment:
    DYNAMODB_TABLE: nomelette.co.uk
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"

functions:
  # Endpoints
  getRecipe:
    handler: api/endpoints/recipes/get.handler
    events:
      - http: GET recipes/{recipeId}
  getTagging:
    handler: api/endpoints/tags/get.handler
    events:
      - http: GET taggings/{tagId}

  #Stream
  streamEvent:
    handler: api/streamEvent/index.handler
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          arn:
            Fn::GetAtt:
              - NomeletteTable
              - StreamArn

# To keep deployments to an absolute minimum, exclude all superflous files
package:
  exclude:
    - .DS_Store
    - api/**/__tests__
    - api/**/__snapshots__
    - api/**/*.spec.js
    - .dynamodb/**
    - node_modules/**
    - package.json
    - package-lock.json
    - README.md

resources:
  - ${file(resources/dynamodb-table.resource.yml)}

custom:
  dynamodb:
    start:
      migrate: true
    stages:
      - dev

plugins:
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list

